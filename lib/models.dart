import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:sqfentity/sqfentity.dart';
import 'MyDbModel.dart';
/*
  These classes was generated by SqfEntity
  To use these SqfEntity classes do following:
  - import Todo.dart into where to use
  - start typing Todo().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
  - and then just put end of filters / or end of only select()  toSingle(todo) / or toList(todoList)
  - you can select one Todo or List<Todo> by your filters and orders
  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
    Enjoy.. Huseyin Tokpunar
*/
// region Todo
class Todo {
  Todo({this.id,  this.userId, this.title, this.completed}) { setDefaultValues();}
  Todo.withFields( this.userId, this.title, this.completed){ setDefaultValues();}
  Todo.withId(this.id,  this.userId, this.title, this.completed){ setDefaultValues();}
  Todo.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;    userId = o['userId'] as int;

    title = o['title'] as String;

    completed = o['completed'] != null ? o['completed'] == 1 : null;


  }
  // FIELDS
  int id;    int userId;
  String title;
  bool completed;
  // end FIELDS


  static const bool _softDeleteActivated=false;
  TodoManager __mnTodo;

  TodoManager get _mnTodo {
    return __mnTodo = __mnTodo ?? TodoManager();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}){
    final map = Map<String, dynamic>();
    if (id != null) {map['id'] = id;}    if (userId != null) {map['userId'] = userId;}

    if (title != null) {map['title'] = title;}

    if (completed != null) {map['completed'] = forQuery? (completed ? 1 : 0) : completed;}


    return map;
  }

  // methods
  Future<Map<String, dynamic>> toMapWithChilds() async{
    final forQuery = false;
    final map = Map<String, dynamic>();
    if (id != null) {map['id'] = id;}    if (userId != null) {map['userId'] = userId;}

    if (title != null) {map['title'] = title;}

    if (completed != null) {map['completed'] = forQuery? (completed ? 1 : 0) : completed;}



    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap());
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }


  List<dynamic> toArgs() {
    return[id, userId, title, completed];
  }

  static Future<List<Todo>> fromWeb([VoidCallback todoList(List<Todo> o)]) async {
    final objList = await fromWebUrl('https://jsonplaceholder.typicode.com/todos');
    if (todoList != null) {todoList (objList); }
    return objList;
  }

  static Future<List<Todo>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Todo.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Todo>> fromJson(String jsonBody) async{
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Todo>();
    try {
      objList = list.map((todo) => Todo.fromMap(todo as Map<String, dynamic>)).toList();
    } catch (e) {
      print('SQFENTITY ERROR Todo.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Todo>> fromObjectList(Future<List<dynamic>> o) async {
    final todosList = List<Todo>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      todosList.add(Todo.fromMap(data[i] as Map<String, dynamic>));
    }
    return todosList;
  }

  static List<Todo> fromMapList(List<Map<String, dynamic>> query) {
    final List<Todo> todos = List<Todo>();
    for (Map map in query) {
      todos.add(Todo.fromMap(map as Map<String, dynamic>));
    }
    return todos;
  }


  /// returns Todo by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Todo if exist, otherwise returns null</returns>
  Future<Todo> getById(int id) async{
    Todo todoObj;
    final data = await _mnTodo.getById(id);
    if (data.length != 0)
    {todoObj = Todo.fromMap(data[0] as Map<String, dynamic>);}
    else
    {todoObj = null;}
    return todoObj;
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnTodo.insert(this);

    }
    else {
      id= await _upsert(); }
    return id;
  }

  /// <summary>
  /// saveAs Todo. Returns a new Primary Key value of Todo
  /// </summary>
  /// <returns>Returns a new Primary Key value of Todo</returns>
  Future<int> saveAs() async {
    id = null;
    return save();
  }



  /// <summary>
  /// saveAll method saves the sent List<Todo> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Todo> todos) async {
    final results = _mnTodo.saveAll('INSERT OR REPLACE INTO todos (id,  userId, title, completed)  VALUES (?,?,?,?)',todos);
    return results;
  }
  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    return id = await _mnTodo.rawInsert(
        'INSERT OR REPLACE INTO todos (id,  userId, title, completed)  VALUES (?,?,?,?)', [id, userId, title, completed]);
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Todo> todos) async {
    final results = await _mnTodo.rawInsertAll(
        'INSERT OR REPLACE INTO todos (id,  userId, title, completed)  VALUES (?,?,?,?)', todos);
    return results;
  }


  /// <summary>
  /// Deletes Todo
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete([bool hardDelete=false]) async {
    print('SQFENTITIY: delete Todo invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTodo.delete(QueryParams(whereString: 'id=$id'));}
    else {
      return _mnTodo.updateBatch(QueryParams(whereString: 'id=$id'), {'isDeleted': 1});}
  }

  //private TodoFilterBuilder _Select;
  TodoFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TodoFilterBuilder(this)
      .._getIsDeleted = getIsDeleted==true
      ..qparams.selectColumns = columnsToSelect;
  }

  TodoFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TodoFilterBuilder(this)
      .._getIsDeleted = getIsDeleted==true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {
    completed=completed ?? false;

  }
//end methods
}
// endregion todo


// region TodoField
class TodoField extends SearchCriteria {
  TodoField(this.todoFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TodoFilterBuilder todoFB;

  TodoField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TodoFilterBuilder equals(var pValue) {
    param.expression = '=';
    todoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.EQuals,
        todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.NotEQuals,
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder isNull() {
    todoFB._addedBlocks = setCriteria(
        0,
        todoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder contains(dynamic pValue) {
    if(pValue != null){todoFB._addedBlocks = setCriteria(
        '%${pValue.toString()}%',
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;}
    return todoFB;
  }

  TodoFilterBuilder startsWith(dynamic pValue) {
    if(pValue != null){todoFB._addedBlocks = setCriteria(
        '${pValue.toString()}%',
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;}
    return todoFB;
  }

  TodoFilterBuilder endsWith(dynamic pValue) {
    if(pValue != null){todoFB._addedBlocks = setCriteria(
        '%${pValue.toString()}',
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;}
    return todoFB;
  }

  TodoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      todoFB._addedBlocks = setCriteria(
          pFirst,
          todoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          todoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        todoFB._addedBlocks = setCriteria(pFirst, todoFB.parameters,
            param, SqlSyntax.LessThan, todoFB._addedBlocks); }
      else {
        todoFB._addedBlocks = setCriteria(pFirst, todoFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks); }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        todoFB._addedBlocks = setCriteria(pLast, todoFB.parameters, param,
            SqlSyntax.GreaterThan, todoFB._addedBlocks);}
      else {
        todoFB._addedBlocks = setCriteria(pLast, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks); }
    }
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    todoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, todoFB.parameters, param,
        SqlSyntax.GreaterThan, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
        SqlSyntax.LessThanOrEquals, todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    todoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.LessThan,
        todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    todoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, todoFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.LessThan,
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    todoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, todoFB.parameters, param,
        SqlSyntax.LessThanOrEquals, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
        SqlSyntax.GreaterThan, todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder inValues(var pValue) {
    todoFB._addedBlocks = setCriteria(
        pValue,
        todoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = '';
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }
}
// endregion TodoField

// region TodoFilterBuilder
class TodoFilterBuilder extends SearchCriteria {
  TodoFilterBuilder(Todo obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Todo _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;


  TodoFilterBuilder get and {
    if (parameters.isNotEmpty)
    {parameters[parameters.length - 1].wOperator = ' AND ';}
    return this;
  }

  TodoFilterBuilder get or {
    if (parameters.isNotEmpty)
    {parameters[parameters.length - 1].wOperator = ' OR ';}
    return this;
  }

  TodoFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TodoFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TodoFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TodoFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TodoFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TodoFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields); }
      else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        } }
    }
    return this;
  }

  TodoFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc '); }
      else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        } }
    }
    return this;
  }

  TodoFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields '); }
      else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        } }
    }
    return this;
  }

  TodoField setField(TodoField field, String colName, DbType dbtype) {
    return TodoField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TodoField _id;
  TodoField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }TodoField _userId;
  TodoField get userId {
    return _userId = setField(_userId, 'userId', DbType.integer);
  }
  TodoField _title;
  TodoField get title {
    return _title = setField(_title, 'title', DbType.text);
  }
  TodoField _completed;
  TodoField get completed {
    return _completed = setField(_completed, 'completed', DbType.bool);
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName); }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value == true ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else {
        whereString += param.whereString;}
    }
    if (Todo._softDeleteActivated) {
      if (whereString != '') {
        whereString = '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';}
      else if (!_getIsDeleted) {whereString = 'ifnull(isDeleted,0)=0';}
    }

    if (whereString != '') {qparams.whereString = whereString;}
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Todo> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete([bool hardDelete=false]) async {
    _buildParameters();
    var r= BoolResult();
    if(Todo._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTodo.updateBatch(qparams,{'isDeleted':1}); }
    else {
      r = await _obj._mnTodo.delete(qparams); }
    return r;
  }


  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTodo.updateBatch(qparams, values);
  }

  /// This method always returns TodoObj if exist, otherwise returns null
  /// <returns>List<Todo></returns>
  Future<Todo> toSingle([VoidCallback todo(Todo o)]) async{
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTodo.toList(qparams);
    final data = await objFuture;
    Todo retVal;
    if (data.isNotEmpty) { retVal = Todo.fromMap(data[0] as Map<String, dynamic>); } else {retVal = null;}
    if(todo!=null) {todo(retVal);}
    return retVal;
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<int> toCount([VoidCallback todoCount (int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final todosFuture = await _obj._mnTodo.toList(qparams);
    final int count = todosFuture[0]['CNT'] as int;
    if(todoCount != null) {todoCount (count);}
    return count;
  }

  /// This method always returns List<Todo>.
  /// <returns>List<Todo></returns>
  Future<List<Todo>> toList([VoidCallback todoList (List<Todo> o)]) async {
    final List<Todo> todosData = List<Todo>();
    final data = await toMapList();
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      todosData.add(Todo.fromMap(data[i] as Map<String, dynamic>));
    }
    if (todoList != null) todoList (todosData);
    return todosData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  /// <returns>List<dynamic></returns>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTodo.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Todo>>
  Future<List<DropdownMenuItem<Todo>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Todo>> o)]) async {
    _buildParameters();
    final todosFuture = _obj._mnTodo.toList(qparams);

    final data = await todosFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Todo>> items = List()
      ..add(DropdownMenuItem(
        value: Todo(),
        child: Text('Select Todo'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Todo.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns=['id',displayTextColumn];
    final todosFuture = _obj._mnTodo.toList(qparams);

    final data = await todosFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Todo'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }


  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey([VoidCallback idList (List<int> o),
    bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns= ['id'];
    final idFuture = await _obj._mnTodo.toList(qparams);


    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    if(idList != null) {idList (idData);}
    return idData;

  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject([VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTodo.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {listObject(objectsData);}
    return objectsData;

  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Todo.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString([VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnTodo.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {listString(objectsData);}
    return objectsData;

  }
}
// endregion TodoFilterBuilder




// region TodoFields
class TodoFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }
  static TableField _fUserId;
  static TableField get userId {
    return _fUserId = _fUserId ?? SqlSyntax.setField(_fUserId, 'userId', DbType.integer);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle = _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fCompleted;
  static TableField get completed {
    return _fCompleted = _fCompleted ?? SqlSyntax.setField(_fCompleted, 'completed', DbType.bool);
  }


}
// endregion TodoFields

//region TodoManager
class TodoManager extends SqfEntityProvider {
  TodoManager():super(MyDbModel(),tableName: _tableName, colId: _colId);
  static String _tableName = 'todos';
  static String _colId = 'id';

}
//endregion TodoManager
class SequenceManager extends SqfEntityProvider {
  SequenceManager() : super(MyDbModel());
}

